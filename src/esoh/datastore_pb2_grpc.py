# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import esoh.datastore_pb2 as datastore__pb2


class DatastoreStub(object):
    """Notes:
    - A _time series_ is a context defined by a set of metadata (defined in TSMetadata below) that
    usually does not vary with observaion (time).
    - An _observation_ consists of a set of of metadata (defined in ObsMetadata below) that usually
    varies with observation (time). Note that for simplicity the observation value itself (such as
    air temperature value 12.7) is also considered a metadata field (although strictly speaking
    this is the only field that is just data, not metadata).
    - There is a 1:N relationship between time series and observations:
    * A given time series (= unique combination of time series metadata fields) is associated with
    one or more observations.
    * A given observation (= unique combination of observation metadata fields) is associated with
    exactly one time series.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PutObservations = channel.unary_unary(
            '/datastore.Datastore/PutObservations',
            request_serializer=datastore__pb2.PutObsRequest.SerializeToString,
            response_deserializer=datastore__pb2.PutObsResponse.FromString,
        )
        self.GetObservations = channel.unary_unary(
            '/datastore.Datastore/GetObservations',
            request_serializer=datastore__pb2.GetObsRequest.SerializeToString,
            response_deserializer=datastore__pb2.GetObsResponse.FromString,
        )


class DatastoreServicer(object):
    """Notes:
    - A _time series_ is a context defined by a set of metadata (defined in TSMetadata below) that
    usually does not vary with observaion (time).
    - An _observation_ consists of a set of of metadata (defined in ObsMetadata below) that usually
    varies with observation (time). Note that for simplicity the observation value itself (such as
    air temperature value 12.7) is also considered a metadata field (although strictly speaking
    this is the only field that is just data, not metadata).
    - There is a 1:N relationship between time series and observations:
    * A given time series (= unique combination of time series metadata fields) is associated with
    one or more observations.
    * A given observation (= unique combination of observation metadata fields) is associated with
    exactly one time series.

    """

    def PutObservations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObservations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatastoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'PutObservations': grpc.unary_unary_rpc_method_handler(
            servicer.PutObservations,
            request_deserializer=datastore__pb2.PutObsRequest.FromString,
            response_serializer=datastore__pb2.PutObsResponse.SerializeToString,
        ),
        'GetObservations': grpc.unary_unary_rpc_method_handler(
            servicer.GetObservations,
            request_deserializer=datastore__pb2.GetObsRequest.FromString,
            response_serializer=datastore__pb2.GetObsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'datastore.Datastore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class Datastore(object):
    """Notes:
    - A _time series_ is a context defined by a set of metadata (defined in TSMetadata below) that
    usually does not vary with observaion (time).
    - An _observation_ consists of a set of of metadata (defined in ObsMetadata below) that usually
    varies with observation (time). Note that for simplicity the observation value itself (such as
    air temperature value 12.7) is also considered a metadata field (although strictly speaking
    this is the only field that is just data, not metadata).
    - There is a 1:N relationship between time series and observations:
    * A given time series (= unique combination of time series metadata fields) is associated with
    one or more observations.
    * A given observation (= unique combination of observation metadata fields) is associated with
    exactly one time series.

    """

    @staticmethod
    def PutObservations(request,
                        target,
                        options=(),
                        channel_credentials=None,
                        call_credentials=None,
                        insecure=False,
                        compression=None,
                        wait_for_ready=None,
                        timeout=None,
                        metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datastore.Datastore/PutObservations',
                                             datastore__pb2.PutObsRequest.SerializeToString,
                                             datastore__pb2.PutObsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObservations(request,
                        target,
                        options=(),
                        channel_credentials=None,
                        call_credentials=None,
                        insecure=False,
                        compression=None,
                        wait_for_ready=None,
                        timeout=None,
                        metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datastore.Datastore/GetObservations',
                                             datastore__pb2.GetObsRequest.SerializeToString,
                                             datastore__pb2.GetObsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
